import org.gradle.internal.jvm.Jvm


/*
 * sercoll - Java Collections declared Serializable
 * Copyright (c) 2015 Thomas Jensen
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for
 * the specific language governing permissions and limitations under the License.
 */
buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
}
plugins {
    id 'java';
    id 'idea';
    id 'checkstyle';
}

repositories {
    mavenLocal()
    jcenter()
}

group = 'com.thomasjensen.sercoll';
description = 'Java Collections declared Serializable';
version = '0.0.1';

ext {
    vendorName = 'Thomas Jensen';
    vendorId = 'com.thomasjensen';
    website = 'https://github.com/tsjensen/sercoll';
    buildTimestamp = new Date();
}


configurations {
    providedCompile
}
dependencies {
    providedCompile group: 'com.google.code.findbugs', name: 'annotations', version: '2.0.3';
    providedCompile group: 'com.google.code.findbugs', name: 'jsr305', version: '2.0.3';
    testCompile group: 'junit', name: 'junit', version: '4.11';
    testCompile group: 'commons-io', name: 'commons-io', version: '2.4';
}
sourceSets.main.compileClasspath += configurations.providedCompile;
sourceSets.main.runtimeClasspath += configurations.providedCompile;
sourceSets.test.compileClasspath += configurations.providedCompile;
sourceSets.test.runtimeClasspath += configurations.providedCompile;



compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_6;
    targetCompatibility = JavaVersion.VERSION_1_6;
    options.encoding = 'UTF-8';
    options.deprecation = true;
}



idea.project {
    languageLevel = JavaVersion.VERSION_1_6;
    // TODO set file encoding to UTF-8
    // example: http://mrhaki.blogspot.de/2012/09/gradle-goodness-customize-idea-project.html
}
idea.module {
    downloadSources = true;
    downloadJavadoc = true;
    excludeDirs += file('.idea');
    excludeDirs += file('_support');
    scopes.PROVIDED.plus += [configurations.providedCompile];
}



checkstyle {
    toolVersion = '6.1.1';
    configFile file('project/checkstyle.xml');
    configProperties 'projectDir': project.projectDir;
    showViolations = true;
    ignoreFailures = false;
}
tasks.withType(Checkstyle).each {
    it.setGroup(LifecycleBasePlugin.VERIFICATION_GROUP);
}



javadoc {
    title = project.name + " v${project.version}";
    classpath = sourceSets.main.compileClasspath;

    options.encoding = 'UTF-8';
    options.docEncoding = 'UTF-8';
    options.charSet = 'UTF-8';
    options.author = false;
    options.use = true;
    options.windowTitle = project.name;
    options.splitIndex = false;
    options.noDeprecated = true;
    options.header = project.name + " v${project.version}";
    options.links('https://jsr-305.googlecode.com/svn/trunk/javadoc/',
            'http://docs.oracle.com/javase/6/docs/api/');

    // javadoc does not inherit the proxy settings (https://issues.gradle.org/browse/GRADLE-1228)
    if (System.properties['http.proxyHost'] != null) {
        options.jFlags('-DproxyHost=' + System.properties['http.proxyHost'],
            '-DproxyPort=' + System.properties['http.proxyPort'],
            '-DproxyUser=' + System.properties['http.proxyUser'],
            '-DproxyPassword=' + System.properties['http.proxyPassword']);
    }
}



jar {
    manifest {
        attributes = ['Manifest-Version'        : '1.0',
                      'Specification-Title'     : project.name,
                      'Specification-Vendor'    : project.ext.vendorName,
                      'Specification-Vendor-Id' : project.ext.vendorId,
                      'Specification-Version'   : project.version,
                      'Implementation-Title'    : project.name,
                      'Implementation-Vendor'   : project.ext.vendorName,
                      'Implementation-Vendor-Id': project.ext.vendorId,
                      'Implementation-Version'  : project.version,
                      'Website'                 : project.ext.website,
                      'Created-By'              : GradleVersion.current().toString(),
                      'Built-By'                : System.getProperty('user.name'),
                      'Build-Jdk'               : Jvm.current().toString(),
        ];
    }
    doFirst {
        // add build timestamp in execution phase so that it does not count for the up-to-date check
        manifest {
            attributes 'Build-Timestamp': project.ext.buildTimestamp.toString();
        }
    }
}



task jarSources(type: Jar) {
    group = BasePlugin.BUILD_GROUP;
    description = 'Assembles a jar archive containing the source files.';

    from sourceSets.main.allJava;
    into('META-INF') {
        from 'LICENSE';
    }
    classifier = 'sources';

    doFirst {
        manifest = tasks.jar.manifest;
        manifest {
            attributes 'Build-Timestamp': project.ext.buildTimestamp.toString();
        }
    }
}



task jarJavadoc(type: Jar) {
    group = BasePlugin.BUILD_GROUP;
    description = 'Assembles a jar archive containing the Javadoc.';
    dependsOn tasks.javadoc;

    from tasks.javadoc.destinationDir;
    into('META-INF') {
        from 'LICENSE';
    }
    classifier = 'javadoc';

    doFirst {
        manifest = tasks.jar.manifest;
        manifest {
            attributes 'Build-Timestamp': project.ext.buildTimestamp.toString();
        }
    }
}



artifacts {
    archives jarSources;
    archives jarJavadoc;
}
